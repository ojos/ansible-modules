---
- name: Create vagrant aws directory.
  file: >
    path="{{ vagrant_aws_vagrant_directory }}"
    state=directory
    mode=0755
    owner={{ vagrant_aws_user }}
    group={{ vagrant_aws_group }}

- name: Install/Update vagrant-aws plug-in.
  shell: >
    vagrant plugin install vagrant-aws
  args:
    chdir: "{{ vagrant_aws_vagrant_directory }}"

- name: Create Vagrantfile(aws).
  template: >
    src=Vagrantfile.tpl
    dest="{{ vagrant_aws_vagrant_directory }}/Vagrantfile"
    owner={{ vagrant_aws_user }}
    group={{ vagrant_aws_group }}
    mode=0644

- name: Insert env in .envrc.
  lineinfile: >
    dest={{ vagrant_aws_envrc_directory }}/.envrc
    line="{{ item.value }}"
    insertafter=EOF
    state=present
    regexp={{ item.regexp }}
  with_items: vagrant_aws_environment_variables
  when: vagrant_aws_envrc_directory != '' and vagrant_aws_environment_variables|length > 0

- name: List of files in the terraform vagrant directory.
  shell: >
    ls {{ vagrant_aws_terraform_directory }}
  register: terraform_vagrant_directory  
  changed_when: false  
  always_run: yes

- name: Remove tf file.
  file: >
    path="{{ vagrant_aws_terraform_directory }}/{{ item }}"
    state=absent
  when: item != 'ec2.tf' and item != 'config.tf' and item != 'vpc_security_group.tf'
  with_items: terraform_vagrant_directory.stdout_lines

- name: Copy ec2.tf.
  copy: >
    src=ec2.tf
    dest={{ vagrant_aws_terraform_directory }}/ec2.tf
    mode=0644
    force=yes

- name: Replace vpc_id in vpc_security_group.tf.
  lineinfile: >
    dest={{ vagrant_aws_terraform_directory }}/vpc_security_group.tf
    line="    vpc_id = \"${var.aws_default_vpc_id}\""
    insertafter=EOF
    state=present
    regexp='^\s+vpc_id\s=\s.+$'

