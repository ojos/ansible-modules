---
- name: Install ansible.
  command: >
    {{ xbuild_ansible_python_bin_directory }}/pip install -U ansible

- name: Create ansible directory.
  file: >
    path="{{ xbuild_ansible_directory }}"
    state=directory
    owner="{{ xbuild_ansible_user }}"
    group="{{ xbuild_ansible_group }}"
    mode=0755
  become: yes

- name: Add roles repository as submodule.
  command: "git submodule add --force {{ xbuild_ansible_roles_repository }} roles"
  args:
    chdir: "{{ xbuild_ansible_directory }}"
  ignore_errors: yes
  when: xbuild_ansible_roles_repository != ''

- name: Ansible Configure file.
  stat: >
    path="{{ xbuild_ansible_directory }}/{{ xbuild_ansible_buildout_playbook_file_name }}"
  register: ansible_cfg
  changed_when: no
  check_mode: no
- name: Create buildout playbook.
  template: >
    src=ansible.tpl
    dest="{{ xbuild_ansible_directory }}/{{ xbuild_ansible_configure_file_name }}"
    owner="{{ xbuild_ansible_user }}"
    group="{{ xbuild_ansible_group }}"
    mode=0644
  when: not ansible_cfg.stat.exists
  become: yes

- name: Inventory file.
  stat: >
    path="{{ xbuild_ansible_directory }}/hosts"
  register: ansible_hosts
  changed_when: no
  check_mode: no
- name: Create buildout playbook.
  copy: >
    src=hosts
    dest="{{ xbuild_ansible_directory }}/hosts"
    owner="{{ xbuild_ansible_user }}"
    group="{{ xbuild_ansible_group }}"
    mode=0644
  when: not ansible_hosts.stat.exists
  become: yes

- name: Buildout playbook.
  stat: >
    path="{{ xbuild_ansible_directory }}/{{ xbuild_ansible_buildout_playbook_file_name }}"
  register: buildout
  changed_when: no
  check_mode: no
- name: Create buildout playbook.
  template: >
    src=buildout.tpl
    dest="{{ xbuild_ansible_directory }}/{{ xbuild_ansible_buildout_playbook_file_name }}"
    owner="{{ xbuild_ansible_user }}"
    group="{{ xbuild_ansible_group }}"
    mode=0644
  when: not buildout.stat.exists
  become: yes

- name: Deploy playbook.
  stat: >
    path="{{ xbuild_ansible_directory }}/{{ xbuild_ansible_deploy_playbook_file_name }}"
  register: deploy_playbook
  changed_when: no
  check_mode: no
- name: Create deploy playbook.
  copy: >
    src=deploy.yaml
    dest="{{ xbuild_ansible_directory }}/{{ xbuild_ansible_deploy_playbook_file_name }}"
    owner="{{ xbuild_ansible_user }}"
    group="{{ xbuild_ansible_group }}"
    mode=0644
  when: not deploy_playbook.stat.exists
  become: yes

- name: Restart playbook.
  stat: >
    path="{{ xbuild_ansible_directory }}/{{ xbuild_ansible_restart_playbook_file_name }}"
  register: restart_playbook
  changed_when: no
  check_mode: no
- name: Create restart playbook.
  copy: >
    src=restart.yaml
    dest="{{ xbuild_ansible_directory }}/{{ xbuild_ansible_restart_playbook_file_name }}"
    owner="{{ xbuild_ansible_user }}"
    group="{{ xbuild_ansible_group }}"
    mode=0644
  when: not restart_playbook.stat.exists
  become: yes

- name: Change ansible directory owner.
  file: >
    path="{{ xbuild_ansible_directory }}"
    state=directory
    recurse=yes
    owner={{ xbuild_ansible_user }}
    group={{ xbuild_ansible_group }}
  become: yes

# - set_fact: >
#     roles_directory="{{ xbuild_ansible_directory | regex_replace(project_directory, '') }}"
# - name: Insert in .gitignore.
#   lineinfile: >
#     dest={{ project_directory }}/.gitignore
#     line="{{ item.value }}"
#     insertafter=EOF
#     state=present
#     regexp={{ item.regexp }}
#   with_items:
#     - value: "{{ roles_directory }}/roles/"
#       regexp: "^{{ roles_directory }}/roles/$"
#   become: yes

- name: Insert env in .envrc.
  lineinfile: >
    dest={{ xbuild_ansible_envrc_directory }}/.envrc
    line="{{ item.value }}"
    insertafter=EOF
    state=present
    regexp={{ item.regexp }}
  with_items: "{{ xbuild_ansible_environment_variables }}"
  when: xbuild_ansible_envrc_directory != '' and xbuild_ansible_environment_variables|length > 0
  become: yes
