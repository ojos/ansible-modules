---
- name: Install dependent packages.
  pip: >
    name={{ item }}
    state=latest
  with_items: "{{ awslambda_dependent_packages }}"
  when: awslambda_dependent_packages|length > 0

- name: Create awslambda directory.
  file: >
    path="{{ awslambda_func_directory }}"
    state=directory
    owner="{{ awslambda_user }}"
    group="{{ awslambda_group }}"
    mode=0755
  become: yes

- name: Touch .gitkeep.
  file: >
    path="{{ awslambda_func_directory }}/.gitkeep"
    state=touch
    owner="{{ awslambda_user }}"
    group="{{ awslambda_group }}"
    mode=0644
  become: yes

- name: Create awslambda IAM role.
  iam_role: >
    name="{{ awslambda_iam_role_name }}"
    assume_role_policy_document="{{ awslambda_role_policy }}"
    state=present
    managed_policy="{{ awslambda_managed_policy }}"
    aws_access_key="{{ awslambda_access_key_id }}"
    aws_secret_key="{{ awslambda_secret_access_key }}"
  register: iam_role_response
- set_fact: >
    awslambda_role_arn="{{ iam_role_response.iam_role.arn }}"

- name: Copy deploy_lambda.py.
  copy: >
    src=deploy_lambda.yml
    dest="{{ awslambda_ansible_directory }}/deploy_lambda.yml"
    owner="{{ awslambda_user }}"
    group="{{ awslambda_group }}"
    mode=0644

- name: Insert env in .envrc.
  lineinfile: >
    dest={{ awslambda_envrc_directory }}/.envrc
    line="{{ item.value }}"
    insertafter=EOF
    state=present
    regexp={{ item.regexp }}
  with_items: "{{ awslambda_environment_variables }}"
  when: awslambda_envrc_directory != '' and awslambda_environment_variables|length > 0
