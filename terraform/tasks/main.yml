---
- name: terraform binary.
  command:       which terraform
  register:      terraform_bin
  ignore_errors: yes
  changed_when:  no
  check_mode:    no

- name: i386.
  when: 
    - "terraform_bin.rc == 1"
    - "ansible_architecture == 'i386'"
  set_fact:
    _arch: '386'

- name: x86_64.
  when: 
    - "terraform_bin.rc == 1"
    - "ansible_architecture == 'x86_64'"
  set_fact:
    _arch: 'amd64'

- name: Download terraform.
  become: yes
  when:   "terraform_bin.rc == 1"
  unarchive:
    src:        "{{ terraform_download_url }}/{{ terraform_version }}/terraform_{{ terraform_version }}_{{ ansible_system|lower }}_{{ _arch }}.zip"
    dest:       "{{ terraform_install_directory }}"
    remote_src: yes

- name: Create orchestration directory.
  become: yes
  file:
    path:  "{{ project_dir }}/orchestration/terraform"
    owner: "{{ project_user }}"
    state: "directory"

- name: Clone skel repository.
  become:        yes
  become_user:   "{{ project_user }}"
  ignore_errors: yes
  when:          keygen_environments|length > 0
  with_items:    "{{ keygen_environments }}"
  git:
    repo:             "{{ terraform_skel_repository }}"
    dest:             "{{ project_dir }}/orchestration/terraform/{{ item }}"
    version:          "{{ terraform_repository_version }}"
    force:            "{{ terraform_repository_force }}"
    track_submodules: yes
    accept_hostkey:   yes

- name: Remove .git.
  become:     yes
  when:       keygen_environments|length > 0
  with_items: "{{ keygen_environments }}"
  file:
    path:  "{{ project_dir }}/orchestration/terraform/{{ item }}/.git"
    state: absent

- name: Replace environment in config.tf.
  become:      yes
  become_user: "{{ project_user }}"
  when:        keygen_environments|length > 0
  with_items:  "{{ keygen_environments }}"
  replace:
    dest:    "{{ project_dir }}/orchestration/terraform/{{ item }}/config.tf"
    replace: '\1"{{ item }}"'
    regexp:  '^(\s+default\s=\s)".+"'

- name: Insert env in .envrc.
  become:      yes
  become_user: "{{ project_user }}"
  with_items:  "{{ terraform_environment_variables }}"
  lineinfile:
    dest:        "{{ project_dir }}/.envrc"
    line:        "{{ item.value }}"
    regexp:      "{{ item.regexp }}"
    insertafter: EOF
    state:       present

- name: aws part
  command:       'grep "^# terraform-aws$" {{ project_dir }}/.envrc'
  register:      terraform_aws
  ignore_errors: yes
  changed_when:  no
  check_mode:    no

- name: Insert aws env in .envrc.
  become:      yes
  become_user: "{{ project_user }}"
  when:        terraform_aws.rc == 1
  with_items:  "{{ terraform_aws_environment_variables }}"
  lineinfile:
    dest:        "{{ project_dir }}/.envrc"
    line:        "{{ item.value }}"
    regexp:      "{{ item.regexp }}"
    insertafter: EOF
    state:       present

- name: direnv allow.
  become:      yes
  become_user: "{{ project_user }}"
  command: "direnv allow ./"
  args:
    chdir: "{{ project_dir }}"
