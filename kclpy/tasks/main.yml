---
- name: Install dependent packages(RedHat).
  yum: >
    name={{ item.name | default(item) }}
    state={{ item.state | default('latest') }}
  become: yes
  with_items: "{{ kclpy_dependent_packages }}"
  when: ansible_os_family == 'RedHat' and kclpy_dependent_packages|length > 0
- name: Install dependent packages(Darwin).
  homebrew_cask: >
    name={{ item.name | default(item) }}
    state={{ item.state | default('present') }}
  with_items: "{{ kclpy_dependent_packages }}"
  when: ansible_os_family == 'Darwin' and kclpy_dependent_packages|length > 0
  environment: 
    HOMEBREW_CASK_OPTS: "{{ homebrew_cask_options }}"

- name: Install kclpy packages.
  pip: >
    name={{ item }}
    state=latest
  with_items: "{{ kclpy_install_packages }}"
  environment:
    PATH: "{{ kclpy_bin_directory }}:{{ ansible_env.PATH }}"
  when: kclpy_install_packages|length > 0

- name: Create kclpy log directory.
  file: >
    path="{{ kclpy_log_directory }}"
    state=directory
    owner="{{ kclpy_user }}"
    group="{{ kclpy_group }}"
    mode=0755
  become: yes

- name: Create kclpy conf directory.
  file: >
    path="{{ kclpy_conf_directory }}"
    state=directory
    owner="{{ kclpy_user }}"
    group="{{ kclpy_group }}"
    mode=0755
  become: yes

- name: Download executable jar.
  get_url: >
    url="{{ kclpy_executable_jar_url }}/{{ kclpy_executable_jar_version }}/{{ kclpy_executable_jar_file_name }}"
    dest="{{ kclpy_conf_directory }}/{{ kclpy_executable_jar_file_name }}"
    mode=0775
  become: yes

- name: Copy executable file.
  copy: >
    src=kcl_app.py
    dest"{{ kclpy_conf_directory }}/{{ kclpy_executable_file_name }}"
    owner="{{ kclpy_user }}"
    group="{{ kclpy_group }}"
    mode=0755
  become: yes

- name: Create properties file.
  template: >
    src=kcl.properties.tpl
    dest="{{ kclpy_conf_directory }}/{{ kclpy_properties_file_name }}"
    owner="{{ kclpy_user }}"
    group="{{ kclpy_group }}"
    mode=0644
  become: yes

- name: Change kclpy conf directory owner.
  file: >
    path={{ kclpy_conf_directory }}
    state=directory
    recurse=yes
    owner={{ kclpy_user }}
    group={{ kclpy_group }}
  become: yes

- name: java binary.
  shell: >
    which java 
  register: java_path  
  changed_when: false  
  always_run: yes

- name: Create supervisord process conf file.
  template: >
    src=supervisord.conf.tpl
    dest={{ supervisord_include_conf_directory }}/kcl_py.conf
    owner="{{ kclpy_user }}"
    group="{{ kclpy_user }}"
    mode=0644
  become: yes