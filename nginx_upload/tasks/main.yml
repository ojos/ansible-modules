---
- name: user list.
  shell: >
    cut -d: -f1 /etc/passwd  
  register: user_list  
  changed_when: false  
  always_run: yes 
  when: ansible_os_family != 'Darwin'
- name: Create nginx user.
  user: >
    name="{{ nginx_upload_user }}"
    shell=/bin/false
    system=yes
    home="{{ nginx_upload_prefix }}/nginx"
    createhome=no
  when: ansible_os_family != 'Darwin' and user_list.stdout_lines.count(nginx_upload_user) < 1
  become: yes

- name: Install/Upgrade dependent packages(RedHat).
  yum: >
    name={{ item.name | default(item) }}
    state={{ item.state | default('latest') }}
  with_items: "{{ nginx_upload_dependent_packages }}"
  when: ansible_os_family == 'RedHat' and nginx_upload_dependent_packages|length > 0
  become: yes

- name: Install/Upgrade dependent packages(Darwin).
  homebrew: >
    name={{ item.name | default(item) }}
    state={{ item.state | default('latest') }}
    install_options={{ item.install_option | default('') }}
  with_items: "{{ nginx_upload_dependent_packages }}"
  when: ansible_os_family == 'Darwin' and nginx_upload_dependent_packages|length > 0


- name: Clone nginx upload module.
  git: >
    repo="{{ nginx_upload_module_repository }}"
    dest="{{ nginx_upload_src_directory }}/{{ nginx_upload_module_name }}"
    update=yes
    accept_hostkey=yes
  become: yes

- name: Extract nginx source.
  unarchive: >
    src="http://nginx.org/download/nginx-{{ nginx_upload_version }}.tar.gz"
    dest="{{ nginx_upload_src_directory }}"
    copy=no
  become: yes

- name: Make file.
  stat: >
    path="{{ nginx_upload_src_directory }}/nginx-{{ nginx_upload_version }}/Makefile"
  register: make_file
  changed_when: no
  always_run: yes
- name: Configure nginx source.
  shell: >
    ./configure {{ nginx_upload_configure_options }} --add-module={{ nginx_upload_src_directory }}/{{ nginx_upload_module_name }}
  args:
    chdir: "{{ nginx_upload_src_directory }}/nginx-{{ nginx_upload_version }}"
  become: yes
  when: not make_file.stat.exists or nginx_upload_force_install

- name: Made file.
  stat: >
    path="{{ nginx_upload_src_directory }}/nginx-{{ nginx_upload_version }}/made"
  register: made_file
  changed_when: no
  always_run: yes
- name: Make nginx.
  shell: >
    {{ nginx_upload_make_bin_file }}
  args:
    chdir: "{{ nginx_upload_src_directory }}/nginx-{{ nginx_upload_version }}"
  become: yes
  when: not made_file.stat.exists or nginx_upload_force_install

- name: Touch Maked file.
  file: >
    path={{ nginx_upload_src_directory }}/nginx-{{ nginx_upload_version }}/made
    state=touch
  become: yes
  when: not made_file.stat.exists

- name: Binary file.
  stat: >
    path={{ nginx_upload_bin_file }}
  register: bin_file
  changed_when: no
  always_run: yes
- name: Install nginx.
  shell: >
    {{ nginx_upload_make_bin_file }} install
  args:
    chdir: "{{ nginx_upload_src_directory }}/nginx-{{ nginx_upload_version }}"
  become: yes
  when: not bin_file.stat.exists or nginx_upload_force_install

- name: Remove source directory.
  file: >
    path="{{ nginx_upload_src_directory }}/nginx-{{ nginx_upload_version }}"
    state=absent
  become: yes
  when: nginx_upload_remove_src_directory

- name: Remove upload module source directory.
  file: >
    path="{{ nginx_upload_src_directory }}/{{ nginx_upload_module_name }}"
    state=absent
  become: yes
  when: nginx_upload_remove_src_directory

- name: Create nginx tmp directory.
  file: >
    path="{{ nginx_upload_tmp_directory }}"
    state=directory
    owner="{{ nginx_upload_user }}"
    group="{{ nginx_upload_group }}"
    mode=0755
  become: yes
- name: Create nginx run directory.
  file: >
    path="{{ nginx_upload_run_directory }}"
    state=directory
    owner="{{ nginx_upload_user }}"
    group="{{ nginx_upload_group }}"
    mode=0755
  become: yes
- name: Create nginx configure sub directory.
  file: >
    path="{{ nginx_upload_sub_conf_directory }}"
    state=directory
    owner="{{ nginx_upload_user }}"
    group="{{ nginx_upload_group }}"
    mode=0755
  become: yes

- name: Copy favicon.ico.
  copy: >
    src=favicon.ico
    dest={{ nginx_upload_prefix }}/html/favicon.ico
    owner="{{ nginx_upload_user }}"
    group="{{ nginx_upload_group }}"
    mode=0644
  become: yes
- name: Copy 404.html.
  copy: >
    src=404.html
    dest={{ nginx_upload_prefix }}/html/404.html
    owner="{{ nginx_upload_user }}"
    group="{{ nginx_upload_group }}"
    mode=0644
  become: yes
- name: Copy 50x.html.
  copy: >
    src=50x.html
    dest={{ nginx_upload_prefix }}/html/50x.html
    owner="{{ nginx_upload_user }}"
    group="{{ nginx_upload_group }}"
    mode=0644
  become: yes

- name: Create nginx.conf.
  template: >
    src=nginx.conf.tpl
    dest={{ nginx_upload_conf_file }}
    owner="{{ nginx_upload_user }}"
    group="{{ nginx_upload_group }}"
    mode=0644
  become: yes

- name: Create global.conf.
  template: >
    src=nginx.global.conf.tpl
    dest={{ nginx_upload_sub_conf_directory }}/global.conf
    owner="{{ nginx_upload_user }}"
    group="{{ nginx_upload_group }}"
    mode=0644
  become: yes
- name: Create http.conf.
  template: >
    src=nginx.http.conf.tpl
    dest={{ nginx_upload_sub_conf_directory }}/http.conf
    owner="{{ nginx_upload_user }}"
    group="{{ nginx_upload_group }}"
    mode=0644
  become: yes
- name: Create http.server.conf.
  template: >
    src=nginx.http.server.conf.tpl
    dest={{ nginx_upload_sub_conf_directory }}/http.server.conf
    owner="{{ nginx_upload_user }}"
    group="{{ nginx_upload_group }}"
    mode=0644
  become: yes

- name: Extract resolver.
  shell: >
    grep nameserver /etc/resolv.conf | awk '{print $2}'
  register: resolver
  changed_when: false  
  always_run: yes
  when: ansible_distribution == 'Amazon'
- name: Replace nginx http server resolver.
  replace: >
    dest="{{ nginx_upload_sub_conf_directory }}/http.conf"
    replace="\1           {{ resolver.stdout }}"
    regexp='(^\s+resolver)           \d+\.\d+\.\d+\.\d'
  when: ansible_distribution == 'Amazon'
  become: yes

- name: Change nginx directory owner.
  file: >
    path="{{ nginx_upload_prefix }}"
    state=directory
    recurse=yes
    owner="{{ nginx_upload_user }}"
    group="{{ nginx_upload_group }}"
  become: yes

- name: Insert env in .envrc.
  lineinfile: >
    dest={{ nginx_upload_envrc_directory }}/.envrc
    line="{{ item.value }}"
    insertafter=EOF
    state=present
    regexp={{ item.regexp }}
  with_items: nginx_upload_environment_variables
  when: nginx_upload_envrc_directory != '' and nginx_upload_environment_variables|length > 0

- name: Create nginx service file.
  template: >
    src=nginx.service.tpl
    dest="{{ nginx_upload_service_file }}"
    owner="{{ nginx_upload_user }}"
    group="{{ nginx_upload_group }}"
    mode=0755
  become: yes
  when: ansible_system == 'Linux'

- name: Register nginx service.
  service: >
    name=nginx
    enabled=yes
  become: yes
  when: ansible_system == 'Linux'
