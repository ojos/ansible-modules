---
- name: Create project directory.
  file: >
    path="{{ project_directory }}"
    owner={{ project_user }}
    group={{ project_group }}
    state=directory
    mode=0755
  become: yes

- name: Copy private key for git.
  copy: >
    src="{{ project_local_private_key }}"
    dest="{{ project_remote_private_key }}"
  when: project_local_private_key != '' and project_remote_private_key != ''

- name: Remote private key file.
  stat: >
    path="{{ project_remote_private_key }}"
  register: remote_private_key
  changed_when: no
  check_mode: no
- name: Change to readonly.
  file: >
    path="{{ project_remote_private_key }}"
    mode=0400
  when: remote_private_key.stat.exists

- name: Clone repository.
  git: >
    repo="{{ project_repository }}"
    dest="{{ project_directory }}"
    track_submodules=true
    version="{{ project_repository_version }}"
    accept_hostkey=true
    force="{{ project_repository_force }}"
  ignore_errors: yes
  when: project_repository != ''

- name: Remove private key.
  file: >
    path={{ project_remote_private_key }}
    state=absent
  when: project_remote_private_key != '' and remote_private_key.stat.exists

- name: .git directory.
  stat: >
    path="{{ project_directory }}/.git"
  register: dot_git_directory
  changed_when: no
  check_mode: no
- name: Remove .git.
  file: >
    path={{ project_directory }}/.git
    state=absent
  when: dot_git_directory.stat.exists and project_repository != '' and project_repository_disconnect

- name: .git directory.
  stat: >
    path="{{ project_directory }}/.git"
  register: dot_git_directory
  changed_when: no
  check_mode: no
- name: git init.
  command: "git init {{ project_repository }}"
  args: >
    chdir="{{ project_directory }}""
  when: not dot_git_directory.stat.exists

# - name: Change project directory owner.
#   file: >
#     path="{{ project_directory }}"
#     state=directory
#     recurse=yes
#     owner={{ project_user }}
#     group={{ project_group }}
#   become: yes
