---
- name: user list.
  shell: >
    cut -d: -f1 /etc/passwd
  register: user_list
  changed_when: false
  check_mode: no
  when: ansible_os_family != 'Darwin'
- name: Create opencv user.
  user: >
    name="{{ opencv_user }}"
    shell=/bin/false
    system=yes
    home="{{ opencv_prefix }}"
    createhome=no
  when: ansible_os_family != 'Darwin' and user_list.stdout_lines.count(opencv_user) < 1 
  become: yes

- name: Install/Upgrade dependent packages(RedHat).
  yum: >
    name={{ item.name | default(item) }}
    state={{ item.state | default('latest') }}
  with_items: "{{ opencv_dependent_packages }}"
  when: ansible_os_family == 'RedHat' and opencv_dependent_packages|length > 0
  become: yes
- name: Install dependent packages(Darwin).
  homebrew: >
    name={{ item.name | default(item) }}
    state={{ item.state | default('latest') }}
    install_options={{ item.install_option | default('') }}
  with_items: "{{ opencv_dependent_packages }}"
  when: ansible_os_family == 'Darwin' and opencv_dependent_packages|length > 0

- name: Create work directory.
  file: >
    path="{{ opencv_work_directory }}"
    state=directory
    owner="{{ opencv_user }}"
    group="{{ opencv_group }}"
    mode=0755
  become: yes

- name: Extract Source code.
  unarchive: >
    src={{ opencv_source_url }}
    dest={{ opencv_work_directory }}
    copy=no
    mode=0755
  become: yes

- name: Cmake, Make and Install.
  shell: "{{ item }}"
  args:
    chdir: "{{ opencv_work_directory }}/opencv-{{ opencv_version }}"
  with_items:
    - "cmake -DCMAKE_INSTALL_PREFIX={{ opencv_prefix }} -DCMAKE_BUILD_TYPE=RELEASE -DWITH_TBB=ON"
    - make
    - make install
  become: yes

- name: Remove work directory.
  file: >
    path="{{ opencv_work_directory }}"
    state=absent
  become: yes

- name: Change opencv directory owner.
  file: >
    path="{{ opencv_prefix }}"
    state=directory
    recurse=yes
    owner="{{ opencv_user }}"
    group="{{ opencv_group }}"
  become: yes

- name: Insert env in .envrc.
  lineinfile: >
    dest={{ opencv_envrc_directory }}/.envrc
    line="{{ item.value }}"
    insertafter=EOF
    state=present
    regexp={{ item.regexp }}
  with_items: "{{ opencv_environment_variables }}"
  when: opencv_envrc_directory != '' and opencv_environment_variables|length > 0
