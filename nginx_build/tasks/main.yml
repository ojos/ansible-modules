---
- name: user list.
  shell: >
    cut -d: -f1 /etc/passwd
  register: user_list  
  changed_when: false  
  always_run: yes 
  when: ansible_os_family != 'Darwin'
- name: Create nginx user.
  user: >
    name="{{ nginx_build_user }}"
    shell=/bin/false
    system=yes
    home="{{ nginx_build_prefix }}/nginx"
    createhome=no
  when: ansible_os_family != 'Darwin' and user_list.stdout_lines.count(nginx_build_user) < 1
  become: yes

- name: Install dependent packages(RedHat).
  yum: >
    name={{ item.name | default(item) }}
    state={{ item.state | default('latest') }}
  become: yes
  with_items: "{{ nginx_build_dependent_packages }}"
  when: ansible_os_family == 'RedHat' and nginx_build_dependent_packages|length > 0
- name: Install dependent packages(Darwin).
  homebrew: >
    name={{ item.name | default(item) }}
    state={{ item.state | default('latest') }}
    install_options={{ item.install_option | default('') }}
  with_items: "{{ nginx_build_dependent_packages }}"
  when: ansible_os_family == 'Darwin' and nginx_build_dependent_packages|length > 0

- name: Install nginx_build.
  shell: >
    go get -u {{ nginx_build_repository }}
  environment:
    PATH: "{{ nginx_build_bin_directory }}:{{ ansible_env.PATH }}"
    GOROOT: "{{ nginx_build_install_directory }}"
    GOPATH: "{{ nginx_build_gopath_directory }}"

- name: Configure nginx.
  shell: >
    nginx-build -d {{ nginx_build_work_directory }} {{ nginx_build_configure_options }}
  args:
    chdir: "{{ project_directory }}"
  environment:
    PATH: "{{ nginx_build_bin_directory }}:{{ nginx_build_gopath_directory }}/bin:{{ ansible_env.PATH }}"
  when: nginx_build_type == 'nginx'

- name: Generate shell script.
  template: >
    src=openresty.sh.tpl
    dest="{{ project_directory }}/openresty.sh"
    mode=0755
  become: yes
  when: nginx_build_type == 'openresty'
- name: Configure openresty.
  shell: >
    ./openresty.sh
  args:
    chdir: "{{ project_directory }}"
  environment:
    PATH: "{{ nginx_build_bin_directory }}:{{ nginx_build_gopath_directory }}/bin:{{ ansible_env.PATH }}"
  when: nginx_build_type == 'openresty'
# - name: Configure openresty.
#   shell: >
#     nginx-build -d {{ nginx_build_work_directory }} {{ nginx_build_openresty_configure_options }} {{ nginx_build_configure_options }}
#   args:
#     chdir: "{{ project_directory }}"
#     executable: /bin/bash
#   environment:
#     PATH: "{{ nginx_build_bin_directory }}:{{ nginx_build_gopath_directory }}/bin:{{ ansible_env.PATH }}"
#   when: nginx_build_type == 'openresty'

- name: Configure tengine.
  shell: >
    nginx-build -d {{ nginx_build_work_directory }} {{ nginx_build_tengine_configure_options }} {{ nginx_build_configure_options }}
  args:
    chdir: "{{ project_directory }}"
  environment:
    PATH: "{{ nginx_build_bin_directory }}:{{ nginx_build_gopath_directory }}/bin:{{ ansible_env.PATH }}"
  when: nginx_build_type == 'tengine'

- name: Source Directory.
  shell: >
    echo $(cd $(find . -maxdepth 2 -type d | grep {{ nginx_build_type }}) && pwd)
  args:
    chdir: "{{ nginx_build_work_directory }}/{{ nginx_build_type }}"
  register: source_dir
- name: Make and Install.
  shell: >
    {{ nginx_build_make_bin_file }} install
  args:
    chdir: "{{ source_dir.stdout }}"
  become: yes

- name: Remove work directory.
  file: >
    path="{{ nginx_build_work_directory }}"
    state=absent
  become: yes

- name: nginx home Directory.
  shell: >
    echo $(cd $(find . -maxdepth 2 -type d | grep ./conf$)/../ && pwd)
  args:
    chdir: "{{ nginx_build_prefix }}"
  register: nginx_home_dir

- name: Copy favicon.ico.
  copy: >
    src=favicon.ico
    dest="{{ nginx_home_dir.stdout }}/html/favicon.ico"
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
    mode=0644
  become: yes
- name: Copy 404.html.
  copy: >
    src=404.html
    dest="{{ nginx_home_dir.stdout }}/html/404.html"
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
    mode=0644
  become: yes
- name: Copy 50x.html.
  copy: >
    src=50x.html
    dest="{{ nginx_home_dir.stdout }}/html/50x.html"
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
    mode=0644
  become: yes

- name: Create nginx.conf.
  template: >
    src=nginx.conf.tpl
    dest="{{ nginx_home_dir.stdout }}/conf/nginx.conf"
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
    mode=0644
  become: yes

- name: Create nginx configure sub directory.
  file: >
    path="{{ nginx_home_dir.stdout }}/conf/conf.d"
    state=directory
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
    mode=0755
  become: yes

- name: Create global.conf.
  template: >
    src=nginx.global.conf.tpl
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/global.conf"
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
    mode=0644
  become: yes
- name: Create http.conf.
  template: >
    src=nginx.http.conf.tpl
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.conf"
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
    mode=0644
  become: yes
- name: Remove commentout in http.conf.
  lineinfile: >
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.conf"
    line='\1\2'
    insertafter=EOF
    state=present
    regexp='^(\s+)# (include.+)$'
    backrefs=yes
  when: nginx_build_type == 'openresty'
  become: yes

- name: Create http.server.conf.
  template: >
    src=nginx.http.server.conf.tpl
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.server.conf"
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
    mode=0644
  become: yes
- name: Remove commentout in http.server.conf(1).
  lineinfile: >
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.server.conf"
    line='\1\2'
    insertafter=EOF
    state=present
    regexp='^(\s+)# (location.+)$'
    backrefs=yes
  when: nginx_build_type == 'openresty'
  become: yes
- name: Remove commentout in http.server.conf(2).
  lineinfile: >
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.server.conf"
    line='\1\2'
    insertafter=EOF
    state=present
    regexp='^(\s+)# (\s+content_by_lua_file .+)$'
    backrefs=yes
  when: nginx_build_type == 'openresty'
  become: yes
- name: Remove commentout in http.server.conf(3).
  lineinfile: >
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.server.conf"
    line='\1\2'
    insertafter=EOF
    state=present
    regexp='^(\s+)# (\})$'
    backrefs=yes
  when: nginx_build_type == 'openresty'
  become: yes

- name: Create http.lua.conf.
  template: >
    src=nginx.http.lua.conf.tpl
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.lua.conf"
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
    mode=0644
  when: nginx_build_type == 'openresty'
  become: yes

- name: Create lua directory.
  file: >
    path="{{ nginx_home_dir.stdout  }}/lua"
    state=directory
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
    mode=0755
  when: nginx_build_type == 'openresty'
  become: yes
- name: Copy current_time.lua.
  copy: >
    src=current_time.lua
    dest={{ nginx_home_dir.stdout }}/lua/current_time.lua
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
    mode=0644
  when: nginx_build_type == 'openresty'
  become: yes

- name: Extract resolver.
  shell: >
    grep nameserver /etc/resolv.conf | awk '{print $2}'
  register: resolver
  changed_when: false  
  always_run: yes
  when: ansible_distribution == 'Amazon'
- name: Replace nginx http server resolver.
  replace: >
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.conf"
    replace="\1           {{ resolver.stdout }}"
    regexp='(^\s+resolver)           \d+\.\d+\.\d+\.\d'
  when: ansible_distribution == 'Amazon'
  become: yes

- name: Change nginx directory owner.
  file: >
    path="{{ nginx_build_prefix }}"
    state=directory
    recurse=yes
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
  become: yes

- name: Create nginx service file.
  template: >
    src=nginx.service.tpl
    dest="{{ nginx_build_service_file }}"
    owner="{{ nginx_build_user }}"
    group="{{ nginx_build_group }}"
    mode=0755
  become: yes
  when: ansible_system == 'Linux'

- name: Register nginx service.
  service: >
    name=nginx
    enabled=yes
  become: yes
  when: ansible_system == 'Linux'

- name: Insert env in .envrc.
  lineinfile: >
    dest={{ nginx_build_envrc_directory }}/.envrc
    line="{{ item.value }}"
    insertafter=EOF
    state=present
    regexp={{ item.regexp }}
  with_items: "{{ nginx_build_environment_variables }}"
  when: nginx_build_envrc_directory != '' and nginx_build_environment_variables|length > 0
