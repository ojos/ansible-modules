---
- name: user list.
  shell: >
    cut -d: -f1 /etc/passwd  
  register: user_list  
  changed_when: false  
  always_run: yes
  when: ansible_os_family != 'Darwin'
- name: Create openresty user.
  user: >
    name="{{ openresty_user }}"
    shell=/bin/false
    system=yes
    home="{{ openresty_prefix }}"
    createhome=no
  when: ansible_os_family != 'Darwin' and user_list.stdout_lines.count(openresty_user) < 1 
  become: yes

- name: Install/Upgrade dependent packages(RedHat).
  yum: >
    name={{ item.name | default(item) }}
    state={{ item.state | default('latest') }}
  with_items: "{{ openresty_dependent_packages }}"
  when: ansible_os_family == 'RedHat' and openresty_dependent_packages|length > 0
  become: yes

- name: Create work directory.
  file: >
    path="{{ openresty_work_directory }}"
    state=directory
    owner="{{ openresty_user }}"
    group="{{ openresty_group }}"
    mode=0755
  become: yes

- name: Extract openresty source.
  unarchive: >
    src="http://openresty.org/download/openresty-{{ openresty_version }}.tar.gz"
    dest="{{ openresty_work_directory }}"
    copy=no
  become: yes

- name: Configure, Make and Install openresty.
  shell: "{{ item }}" 
  args:
    chdir: "{{ openresty_work_directory }}/openresty-{{ openresty_version }}"
  with_items:
    - "./configure {{ openresty_configure_options }}"
    - make
    - make install
  become: yes

- name: Configure openresty source.
  shell: >
    ./configure {{ openresty_configure_options }}
  args:
    chdir: "{{ openresty_work_directory }}/openresty-{{ openresty_version }}"
  become: yes

- name: nginx home Directory.
  shell: >
    echo $(cd $(find . -maxdepth 2 -type d | grep ./conf$)/../ && pwd)
  args:
    chdir: "{{ openresty_prefix }}"
  register: nginx_home_dir

- name: Copy static files.
  copy: >
    src="{{ item }}"
    dest="{{ nginx_home_dir.stdout }}/html/{{ item }}"
    owner="{{ openresty_user }}"
    group="{{ openresty_group }}"
    mode=0644
  with_items:
    - favicon.ico
    - 404.html
    - 50x.html
  become: yes

- name: Create nginx.conf.
  template: >
    src=nginx.conf.tpl
    dest="{{ nginx_home_dir.stdout }}/conf/nginx.conf"
    owner="{{ openresty_user }}"
    group="{{ openresty_group }}"
    mode=0644
  become: yes

- name: Create nginx configure sub directory.
  file: >
    path="{{ nginx_home_dir.stdout }}/conf/conf.d"
    state=directory
    owner="{{ openresty_user }}"
    group="{{ openresty_group }}"
    mode=0755
  become: yes

- name: Create sub conf files.
  template: >
    src="nginx.{{ item }}.tpl"
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/{{ item }}"
    owner="{{ openresty_user }}"
    group="{{ openresty_group }}"
    mode=0644
  with_items:
    - global.conf
    - http.conf
    - http.server.conf
    - http.lua.conf
  become: yes

- name: Remove commentout in http.conf.
  lineinfile: >
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.conf"
    line='\1\2'
    insertafter=EOF
    state=present
    regexp='^(\s+)# (include.+)$'
    backrefs=yes
  become: yes

- name: Remove commentout in http.server.conf(1).
  lineinfile: >
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.server.conf"
    line='\1\2'
    insertafter=EOF
    state=present
    regexp='^(\s+)# (location.+)$'
    backrefs=yes
  become: yes
- name: Remove commentout in http.server.conf(2).
  lineinfile: >
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.server.conf"
    line='\1\2'
    insertafter=EOF
    state=present
    regexp='^(\s+)# (\s+content_by_lua_file .+)$'
    backrefs=yes
  become: yes
- name: Remove commentout in http.server.conf(3).
  lineinfile: >
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.server.conf"
    line='\1\2'
    insertafter=EOF
    state=present
    regexp='^(\s+)# (\})$'
    backrefs=yes
  become: yes

- name: Create lua directory.
  file: >
    path="{{ nginx_home_dir.stdout  }}/lua"
    state=directory
    owner="{{ openresty_user }}"
    group="{{ openresty_group }}"
    mode=0755
  become: yes
- name: Copy current_time.lua.
  copy: >
    src=current_time.lua
    dest={{ nginx_home_dir.stdout }}/lua/current_time.lua
    owner="{{ openresty_user }}"
    group="{{ openresty_group }}"
    mode=0644
  become: yes

- name: Extract resolver.
  shell: >
    grep nameserver /etc/resolv.conf | awk '{print $2}'
  register: resolver
  changed_when: false  
  always_run: yes
  when: ansible_distribution == 'Amazon'
- name: Replace nginx http server resolver.
  replace: >
    dest="{{ nginx_home_dir.stdout }}/conf/conf.d/http.conf"
    replace="\1           {{ resolver.stdout }}"
    regexp='(^\s+resolver)           \d+\.\d+\.\d+\.\d'
  when: ansible_distribution == 'Amazon'
  become: yes

- name: Change nginx directory owner.
  file: >
    path="{{ openresty_prefix }}"
    state=directory
    recurse=yes
    owner="{{ openresty_user }}"
    group="{{ openresty_group }}"
  become: yes

- name: Create nginx service file.
  template: >
    src=nginx.service.tpl
    dest="{{ openresty_service_file }}"
    owner="{{ openresty_user }}"
    group="{{ openresty_group }}"
    mode=0755
  become: yes
  when: ansible_system == 'Linux'

- name: Register nginx service.
  service: >
    name=nginx
    enabled=yes
  become: yes
  when: ansible_system == 'Linux'

- name: Insert env in .envrc.
  lineinfile: >
    dest={{ openresty_envrc_directory }}/.envrc
    line="{{ item.value }}"
    insertafter=EOF
    state=present
    regexp={{ item.regexp }}
  with_items: "{{ openresty_environment_variables }}"
  when: openresty_envrc_directory != '' and openresty_environment_variables|length > 0

